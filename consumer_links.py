import asyncio
import json
import re

from aiokafka import AIOKafkaConsumer
from core.config import settings
from parsers.universal_parser import extract_article
from producer import send_raw
from datetime import datetime, timezone

# —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Telegram-—Å—Å—ã–ª–∫–∏
TG_LINK_RE = re.compile(r"https?://t\.me/[\w\d_]+/\d+")

# === Consumer ===
async def consume_links():
    """
    –°–ª—É—à–∞–µ—Ç Kafka-—Ç–æ–ø–∏–∫ tg_links, –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏,
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç Telegram —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç, –∏ –ø–∞—Ä—Å–∏—Ç.
    """
    consumer = AIOKafkaConsumer(
        settings.KAFKA_TOPIC_TG_LINKS,
        bootstrap_servers=settings.KAFKA_BOOTSTRAP_SERVERS,
        group_id="tg_parser_group",
        enable_auto_commit=True,
        auto_offset_reset="earliest",
        value_deserializer=lambda v: json.loads(v.decode("utf-8"))  # ‚úÖ —Ç–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞—Ä—å
    )

    await consumer.start()
    try:
        async for msg in consumer:
            data = msg.value  # —Ç—É—Ç —É–∂–µ dict
            print(f'{data=}')
            url = data["url"]
            text = data["text"]
            print(f"üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")

            try:
                if TG_LINK_RE.match(url):
                    # === –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è ===
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ç–≤–æ–µ–≥–æ Telethon –∫–ª–∏–µ–Ω—Ç–∞ (—Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–∫–∞)
                    msg_dt = datetime.now(tz=timezone.utc)

                    news = {
                        "title": "",  # —É —Ç–µ–ª–µ–≥–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π, –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–¥—ë—Ç –≤ description
                        "description": text,
                        "news_date": msg_dt.isoformat(),
                        "url": url,
                        "source": "Telegram",
                        "flag": "user_tg",  # üëà –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        "name": "tg_user_link"  # üëà –º–æ–¥—É–ª—å-–∏—Å—Ç–æ—á–Ω–∏–∫
                    }

                else:
                    # === –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏ ===
                    article = extract_article(url)
                    if not article["description"]:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç—å—é: {url}")
                        continue
                    news = {
                        "title": article["title"] or "",
                        "description": article["description"],
                        "news_date": datetime.now(tz=timezone.utc).isoformat(),
                        "url": article["url"],
                        "source": article["source"],
                        "flag": "user_web",  # üëà –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ —ç—Ç–æ —Å–∞–π—Ç
                        "name": "user_link"  # üëà –º–æ–¥—É–ª—å-–∏—Å—Ç–æ—á–Ω–∏–∫
                    }
                # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
                await send_raw(news)
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka [news_raw]: {news['url']}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")

    finally:
        await consumer.stop()