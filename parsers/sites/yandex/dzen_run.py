import asyncio
import os
import json
from typing import List, Dict, Any, Optional

from dzen_links import get_new_links  # –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
from dzen_story import parse_dzen_link  # –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
from parsers.sites.yandex.ya import get_dzen_article

SEEN_FILE = "seen_links.json"


def load_seen_links() -> set:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()


def save_seen_links(links: set):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(links), f, ensure_ascii=False, indent=2)


async def collect_dzen_news(
    scrolls: int = 12,
    max_concurrency: int = 4,
    limit_total: Optional[int] = None,
    save_to: Optional[str] = "dzen_news.json",
) -> List[Dict[str, Any]]:
    """
    –ï–î–ò–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê.
    1) –°–æ–±–∏—Ä–∞–µ—Ç –ù–û–í–´–ï —Å—Å—ã–ª–∫–∏ —Å –≥–ª–∞–≤–Ω–æ–π –î–∑–µ–Ω.–ù–æ–≤–æ—Å—Ç–∏.
    2) –ü–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º –ø–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ/—Ç–µ–∫—Å—Ç.

    :param scrolls: —Å–∫–æ–ª—å–∫–æ ¬´–ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å¬ª –≥–ª–∞–≤–Ω—É—é
    :param max_concurrency: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    :param limit_total: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (None ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞)
    :param save_to: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON (None ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å)
    :return: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    """
    # —à–∞–≥ 1: —Å–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫–∏
    categories, flat_new = await get_new_links(scrolls=scrolls)
    print(flat_new)
    print(flat_new[:10])

    # —à–∞–≥ 2: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ
    seen_links = load_seen_links()
    new_links = [link for link in flat_new if link not in seen_links]

    if not new_links:
        print("üîπ –ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç")
        return []

    if limit_total:
        new_links = new_links[:limit_total]

    print(f"üîπ –ù–∞–π–¥–µ–Ω–æ {len(new_links)} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫")

    # —à–∞–≥ 3: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    semaphore = asyncio.Semaphore(max_concurrency)

    async def sem_task(url):
        async with semaphore:
            return await get_dzen_article(url)

    tasks = [asyncio.create_task(sem_task(url)) for url in new_links]
    news_data = await asyncio.gather(*tasks)

    # —à–∞–≥ 4: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ seen
    seen_links.update(new_links)
    save_seen_links(seen_links)

    # —à–∞–≥ 5: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if save_to:
        with open(save_to, "w", encoding="utf-8") as f:
            json.dump(news_data, f, ensure_ascii=False, indent=2)

    return news_data


# ==== –¢–µ—Å—Ç ====
if __name__ == "__main__":
    async def main():
        news = await collect_dzen_news(limit_total=5)
        for n in news:
            print("‚Äî", n.get("title"), n.get("date"))

    asyncio.run(main())