# –í–∞—à —Ñ–∞–π–ª —Å –ø–∞—Ä—Å–µ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º (telegram_parser.py)
import json
import logging
import re
import asyncio
from datetime import datetime

from telethon import TelegramClient, events
from telethon.tl import types

from environs import Env
from io import BytesIO


from bs4 import BeautifulSoup

from parsers.tg.functions import clean_leading_number, clean_text
from producer import send_raw

env = Env()
env.read_env()

# üîß –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –≤ –ø–∞–º—è—Ç–∏
def extract_news_from_html_content(html: str):
    soup = BeautifulSoup(html, "html.parser")
    pattern = re.compile(r"\d+\.\s+.+")
    news = []

    for font_tag in soup.find_all("font", {"color": "red", "size": "5"}):
        title_tag = font_tag.find("b")
        if title_tag and pattern.match(title_tag.get_text()):
            title = title_tag.get_text(strip=True)
            block = font_tag.find_parent("blockquote")
            if block:
                text = block.get_text(separator="\n", strip=True)
                link_tag = block.find("a", string="–ê–¥—Ä–µ—Å")
                link = link_tag['href'] if link_tag and 'href' in link_tag.attrs else None
                news.append({"title": title, "text": text, "link": link})
    return news


async def news_input(title: str,
               description: str,
               source: str,
               url: str,
               news_date,
               check_type: bool = True):  # –º–æ–∂–µ—Ç –±—ã—Ç—å str –∏–ª–∏ datetime
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞—Ñ–∫–∞'''
    if isinstance(news_date, datetime):
        news_date = news_date.isoformat()

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏
    news = {
        "title": title,
        "description": description,
        "news_date": news_date,
        "url": url,
        "source": f'tg_{source}',
        "flag": "raw",
        "name": "tg_pars"
    }

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
    await send_raw(news)
    print(f"üì§ [{source}] –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {description[:100]}")



async def run_telegram_script_russia():
    api_id = env('api_id_russia')
    api_hash = env('api_hash_russia')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(filename='telegram_parser.log', level=logging.ERROR)

    client = TelegramClient('myGrab_rus', api_id, api_hash, system_version="4.16.30-vxCUSTOM")
    print("GRAB - Started RUSSIAN")

    @client.on(events.NewMessage())
    async def my_group_handler(event):
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        chat_id = event.chat_id

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        message_id = event.id

        try:
            if chat_id != -4174113127:
                # === [1] –ï—Å–ª–∏ —ç—Ç–æ HTML-—Ñ–∞–π–ª (.htm) ===
                file_name = getattr(event.file, 'name', None)
                if file_name and file_name.endswith(".htm"):
                    file_bytes = BytesIO()
                    await event.download_media(file=file_bytes)
                    file_bytes.seek(0)
                    html_content = file_bytes.read().decode('utf-8')

                    news_data = extract_news_from_html_content(html_content)

                    for n in news_data:
                        title = clean_leading_number(n['title'])
                        description = clean_text(n['text'])
                        await news_input(
                            check_type=False,
                            title=title,
                            description=description,
                            source='',
                            url=n['link'],
                            news_date=datetime.now()
                        )

                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª

                    return  # –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª

                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞
                entity = await client.get_entity(chat_id)

                if isinstance(entity, types.Chat):  # –ì—Ä—É–ø–ø–∞
                    text = event.message.message
                    # date = event.message.date
                    name = f'–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: {entity.title}'
                    link = ''


                    await news_input(
                        title=text[:30],
                        description=text,
                        source=entity.title,
                        url=link,
                        news_date=datetime.now()
                    )

                elif isinstance(entity, types.Channel):  # –ö–∞–Ω–∞–ª

                    text = event.message.message
                    name = f'–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: {entity.title}'
                    link = f'https://t.me/{entity.username}/{message_id}'
                    # date = event.message.date



                    await news_input(
                        title=text[:30],
                        description=text,
                        source=entity.title,
                        url=link,
                        news_date=datetime.now()
                    )

                else:

                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return None

    await client.start()
    await client.run_until_disconnected()