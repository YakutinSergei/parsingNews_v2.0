# –í–∞—à —Ñ–∞–π–ª —Å –ø–∞—Ä—Å–µ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º (telegram_parser.py)
import json
import logging
import re
import asyncio
from datetime import datetime, timezone

from telethon import TelegramClient, events
from telethon.tl import types

from environs import Env
from io import BytesIO


from bs4 import BeautifulSoup

from parsers.tg.functions import clean_leading_number, clean_text
from producer import send_raw

env = Env()
env.read_env()

# üîß –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –≤ –ø–∞–º—è—Ç–∏
def extract_news_from_html_content(html: str):
    soup = BeautifulSoup(html, "html.parser")
    pattern = re.compile(r"\d+\.\s+.+")
    news = []

    for font_tag in soup.find_all("font", {"color": "red", "size": "5"}):
        title_tag = font_tag.find("b")
        if title_tag and pattern.match(title_tag.get_text()):
            title = title_tag.get_text(strip=True)
            block = font_tag.find_parent("blockquote")
            if block:
                text = block.get_text(separator="\n", strip=True)
                link_tag = block.find("a", string="–ê–¥—Ä–µ—Å")
                link = link_tag['href'] if link_tag and 'href' in link_tag.attrs else None
                news.append({"title": title, "text": text, "link": link})
    return news


async def news_input(title: str,
               description: str,
               source: str,
               url: str,
               news_date,
               check_type: bool = True):  # –º–æ–∂–µ—Ç –±—ã—Ç—å str –∏–ª–∏ datetime
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞—Ñ–∫–∞'''
    if isinstance(news_date, datetime):
        news_date = news_date.isoformat()
    if not source or not description:
        return None
    else:
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ—Å—Ç–∏
        news = {
            "title": title,
            "description": description,
            "news_date": news_date,
            "url": url,
            "source": f'tg_{source}',
            "flag": "raw",
            "name": "tg_pars"
        }

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
        await send_raw(news)
        print(f"üì§ [{source}] –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {description[:100]}")



# === –ü–∞—Ä—Å–µ—Ä HTML-—Ñ–∞–π–ª–æ–≤ .htm (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π) ===
def extract_news_from_html_content(html: str):
    """–ü–∞—Ä—Å–∏—Ç .htm —Ñ–∞–π–ª: –∏—â–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –±–ª–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    soup = BeautifulSoup(html, "html.parser")  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç BeautifulSoup –¥–ª—è HTML
    pattern = re.compile(r"\d+\.\s+.+")  # —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤–∏–¥–∞ "1. –¢–µ–∫—Å—Ç"

    out = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for font_tag in soup.find_all("font", {"color": "red", "size": "5"}):  # –∏—â–µ–º <font color=red size=5>
        title_tag = font_tag.find("b")  # –≤–Ω—É—Ç—Ä–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if not title_tag:
            continue
        title = title_tag.get_text(strip=True)  # —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if not pattern.match(title):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ, —á—Ç–æ —ç—Ç–æ "–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π" –∑–∞–≥–æ–ª–æ–≤–æ–∫
            continue

        block = font_tag.find_parent("blockquote")  # –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Ä—è–¥–æ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if not block:
            continue

        text = block.get_text(separator="\n", strip=True)  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞
        link_tag = block.find("a", string=re.compile(r"–ê–¥—Ä–µ—Å", re.I))  # –∏—â–µ–º —Å—Å—ã–ª–∫—É "–ê–¥—Ä–µ—Å ..."
        link = link_tag["href"] if link_tag and link_tag.has_attr("href") else ""  # –±–µ—Ä—ë–º href

        out.append({"title": title, "text": text, "link": link})  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    return out


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Telethon ===
async def run_telegram_script_russia():
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_id = env('api_id_russia')
    api_hash = env('api_hash_russia')

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (–±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏)
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
    log = logging.getLogger("tg_rus")

    # —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Telethon (—Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª "myGrab_rus.session")
    client = TelegramClient('myGrab_rus', api_id, api_hash, system_version="4.16.30-vxCUSTOM")
    log.info("GRAB - Started RUSSIAN")

    EXCLUDE_CHAT_ID = -4174113127  # –∏—Å–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
    @client.on(events.NewMessage())
    async def handler(event: events.NewMessage.Event):
        try:
            msg = event.message  # —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not msg:  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ
                return

            chat_id = event.chat_id  # id —á–∞—Ç–∞
            if chat_id == EXCLUDE_CHAT_ID:  # –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π —á–∞—Ç
                return

            # --- –∫–µ–π—Å 1: –ø—Ä–∏—à—ë–ª —Ñ–∞–π–ª .htm ---
            file = event.file  # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
            file_name = getattr(file, "name", None)  # –∏–º—è —Ñ–∞–π–ª–∞
            if file_name and file_name.lower().endswith(".htm"):  # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ HTML-—Ñ–∞–π–ª
                buf = BytesIO()  # —Å–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
                await event.download_media(file=buf)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
                buf.seek(0)  # —Å—Ç–∞–≤–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
                html_content = buf.read().decode("utf-8", errors="ignore")  # —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞

                # –ø–∞—Ä—Å–∏–º HTML –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                for n in extract_news_from_html_content(html_content):
                    title = clean_leading_number(n["title"])  # –æ—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—É–±–∏—Ä–∞–µ–º "1. ", "2. " –∏ —Ç.–¥.)
                    description = clean_text(n["text"])  # —á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç
                    if not (title or description or n["link"]):  # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue
                    await news_input(  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ë–î (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–ª—å—à–µ)
                        check_type=False,
                        title=title,
                        description=description,
                        source="Telegram (HTM)",
                        url=n["link"],
                        news_date=datetime.now(timezone.utc),  # –≤—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ (UTC)
                    )
                return  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚Äî —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏

            # --- –∫–µ–π—Å 2: –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
            text = (msg.message or "").strip()  # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if not text:  # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return

            # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑ Telegram, –≤ UTC)
            msg_dt = (msg.date or datetime.now().replace(tzinfo=timezone.utc)).astimezone(timezone.utc)

            # entity –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ä–∞–∑—É –≤ event.chat (—ç–∫–æ–Ω–æ–º–∏–º –Ω–∞ get_entity)
            entity = event.chat if event.chat else await client.get_entity(chat_id)

            # –∏—Å—Ç–æ—á–Ω–∏–∫: –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
            if isinstance(entity, (types.Chat, types.Channel)) and getattr(entity, "title", None):
                source = entity.title.strip()
            else:
                source = "Telegram"

            # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å username)
            url = ""
            if isinstance(entity, types.Channel) and getattr(entity, "username", None):
                if source == 'Mash':
                    url = f"https://t.me/mash/{event.id}"
                else:
                    url = f"https://t.me/{entity.username}/{event.id}"

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π, –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–¥—ë—Ç –≤ description)
            await news_input(
                title='',
                description=clean_text(text),
                source=source,
                url=url,
                news_date=msg_dt,  # –¥–∞—Ç–∞ –æ—Ç Telegram
            )

        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É (—Å –ø–æ–ª–Ω—ã–º —Ç—Ä–µ–π—Å–±–µ–∫–æ–º)
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π
    await client.start()
    await client.run_until_disconnected()