import asyncio
import random
import re
from datetime import datetime, timedelta

from bs4 import BeautifulSoup
from playwright.async_api import async_playwright
from fake_useragent import UserAgent

# —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç fake-useragent ‚Äî –æ–Ω –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–µ User-Agent —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
ua = UserAgent()

def get_desktop_ua():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π desktop User-Agent (–±–µ–∑ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤)."""
    while True:
        agent = ua.random
        if not re.search(r"(Mobile|Android|iPhone|iPad|iPod)", agent, re.IGNORECASE):
            return agent


async def parse_dzen_article(browser, url):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å Dzen –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç:
    - –∑–∞–≥–æ–ª–æ–≤–æ–∫
    - —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    - –∞–≤—Ç–æ—Ä–∞
    - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–≤–æ–π User-Agent.
    """

    # üß≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ desktop User-Agent
    random_ua = get_desktop_ua()

    # üß© –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
    context = await browser.new_context(
        user_agent=random_ua,
        viewport={
            "width": random.randint(1280, 1920),
            "height": random.randint(720, 1080)
        },
        locale=random.choice(["ru-RU", "en-US", "uk-UA"]),
    )

    page = await context.new_page()

    result = {
        "url": url,
        "user_agent": random_ua,
        "title": None,
        "text": None,
        "author": None,
        "images": [],
    }

    try:
        print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é: {url}")

        # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ç–∏—à–∏–Ω—ã —Å–µ—Ç–∏)
        try:
            await page.goto(url, wait_until="domcontentloaded", timeout=60000)
        except Exception:
            print("‚ö† –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–±—É–µ–º —Å 'load'")
            try:
                await page.goto(url, wait_until="load", timeout=60000)
            except Exception:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Dzen")
                return None

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ ‚Äî –∂–¥—ë–º –ø—Ä–æ–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await asyncio.sleep(random.uniform(2, 4))

        # -------------------------
        # üü© –ó–∞–≥–æ–ª–æ–≤–æ–∫
        # -------------------------
        title_el = await page.query_selector("h1, [data-testid='news-headline'], .article__title")
        if title_el:
            result["title"] = (await title_el.inner_text()).strip()

        # -------------------------
        # üü© –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
        # -------------------------
        article_body = await page.query_selector("[data-testid='article-body']")
        if article_body:
            blocks = await article_body.query_selector_all("[data-testid='article-render__block']")
            content_parts = []
            for block in blocks:
                block_type = await block.get_attribute("data-block-type")
                if block_type == "image":
                    continue
                text = await block.inner_text()
                if text:
                    clean = " ".join(text.split())
                    content_parts.append(clean)
            if content_parts:
                result["text"] = "\n\n".join(content_parts).strip()

        # -------------------------
        # üü© –ê–≤—Ç–æ—Ä
        # -------------------------
        author_el = await page.query_selector("[class*='author'], [data-testid='author-name']")
        if author_el:
            author_text = (await author_el.inner_text()).strip()
            if author_text.lower().startswith("–∞–≤—Ç–æ—Ä:"):
                author_text = author_text.split(":", 1)[1].strip()
            result["author"] = author_text


        # üßæ –õ–æ–≥
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ: {result['title'] or '(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)'} | UA: {result['user_agent'][:35]}")

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç—å–∏ {url}: {e}")
        result["error"] = str(e)

    finally:
        await page.close()
        await context.close()

    return result


async def parse_dzen_news(hours_back=5):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å Dzen.ru (—Ä–∞–∑–¥–µ–ª '–•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–µ–Ω—Ç–∞')
    hours_back ‚Äî –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —á–∞—Å–æ–≤)
    """

    # URL –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π Dzen
    url = "https://dzen.ru/news/rubric/chronologic"

    # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –º–∏–Ω—É—Å N —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π)
    cutoff_time = datetime.now() - timedelta(hours=hours_back)

    # —Å—é–¥–∞ –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    results = []

    # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent (—á—Ç–æ–±—ã –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è –±–æ—Ç)
    random_ua = get_desktop_ua()
    print(f"üß≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent:\n{random_ua}\n")

    # —Å–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Playwright
    async with async_playwright() as p:
        # –∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Chromium
        # headless=True ‚Äî –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
        browser = await p.chromium.launch(headless=False)

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
        # –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = await browser.new_context(
            user_agent=random_ua,                   # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UA
            viewport={                              # –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "width": random.randint(1280, 1920),  # —Å–ª—É—á–∞–π–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
                "height": random.randint(1000, 1280)   # —Å–ª—É—á–∞–π–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
            },
            locale=random.choice(["ru-RU", "en-US", "uk-UA"]),  # —Å–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É (—Å—Ç—Ä–∞–Ω–∏—Ü—É)
        page = await context.new_page()

        # –∑–∞–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        await page.set_extra_http_headers({
            "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",  # —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            "Referer": "https://dzen.ru/",                 # —Å –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "DNT": "1",                                    # ¬´Do Not Track¬ª ‚Äî –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
        })

        try:
            print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Dzen...")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ URL, –∂–¥—ë–º –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
            # wait_until="networkidle" ‚Äî –∂–¥—ë–º –ø–æ–∫–∞ —Å–µ—Ç—å —Å—Ç–∞–Ω–µ—Ç ¬´–ø—É—Å—Ç–æ–π¬ª (–≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)
            # timeout=90000 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 90 —Å–µ–∫—É–Ω–¥
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ç–∏—à–∏–Ω—ã —Å–µ—Ç–∏
            try:
                await page.goto(url, wait_until="domcontentloaded", timeout=60000)
            except Exception:
                print("‚ö† –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å 'load'")
                try:
                    await page.goto(url, wait_until="load", timeout=60000)
                except Exception:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Dzen –¥–∞–∂–µ —Å–æ –≤—Ç–æ—Ä—ã–º –º–µ—Ç–æ–¥–æ–º")
                    return []

            # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ–º
            await asyncio.sleep(random.uniform(2, 4))

            # –ñ–¥—ë–º, –ø–æ–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ (—ç–ª–µ–º–µ–Ω—Ç—ã <article>)
            await page.wait_for_selector("article", timeout=20000)
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π...\n")

        except Exception as e:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∏–ª–∏ —Å–∞–π—Ç –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            await browser.close()
            return []  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (lazy-loading)
        last_height = 0  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π

        for _ in range(random.randint(2,5)):  # —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (8‚Äì14)
            await page.mouse.wheel(0, -4000) # –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
            await asyncio.sleep(random.uniform(1, 2))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ data-testid
        articles = await page.query_selector_all("article[data-testid='card-horizontal-meta']")
        count = await page.eval_on_selector_all("article", "els => els.length")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ <article>: {count}")
        for a in articles:
            try:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                title_el = await a.query_selector("[data-testid='card-horizontal-meta-title']")
                title = await title_el.inner_text() if title_el else None

                sourse_el = await a.query_selector("[data-testid='news-site--card-horizontal-news-meta__author-1D']")
                source = await sourse_el.inner_text() if sourse_el else None

                # –û–ø–∏—Å–∞–Ω–∏–µ
                desc_el = await a.query_selector("[data-testid='card-description']")
                description = await desc_el.inner_text() if desc_el else None

                # –°—Å—ã–ª–∫–∞
                link_el = await a.query_selector("a[data-testid='card-horizontal-meta-link']")
                href = await link_el.get_attribute("href") if link_el else None

                # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                time_el = await a.query_selector("[class*='timestamp']")
                time_text = await time_el.inner_text() if time_el else None

                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
                published = None
                if time_text:
                    t = time_text.lower().replace("\xa0", " ").strip()
                    if "–º–∏–Ω" in t:
                        mins = int(t.split()[0])
                        published = datetime.now() - timedelta(minutes=mins)
                    elif "—á–∞—Å" in t:
                        hrs = int(t.split()[0])
                        published = datetime.now() - timedelta(hours=hrs)
                    elif "–≤—á–µ—Ä–∞" in t:
                        published = datetime.now() - timedelta(days=1)

                if published and published >= cutoff_time:
                    description = await parse_dzen_article(browser, href)
                    results.append({
                        "title": title or "",
                        "description": description or "",
                        "link": href or "",
                        "source": source or "",
                        "published": published.strftime("%Y-%m-%d %H:%M"),
                    })
                else:
                    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∂–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä
                    print(f"üïê –ü—Ä–æ–ø—É—â–µ–Ω–∞: {title} ‚Äî {time_text}")

            except Exception as e:
                print("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏:", e)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä (–≤–∞–∂–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã)
        await browser.close()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    results.sort(key=lambda x: x["published"], reverse=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    return results


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ø–∞—Ä—Å–µ—Ä
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–∞—Å–æ–≤
    news = await parse_dzen_news(hours_back=5)
    print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–∞—Å–æ–≤:\n")

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    for n in news:
        print(f"[{n['published']}] {n['title']}")
        print(f"[{n['source']}]")
        print(f"‚Üí {n['link']}\n")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    # asyncio.run –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main()
    asyncio.run(main())



